package org.pepstock.charba.client.jsinterop.options;

import org.pepstock.charba.client.commons.Key;
import org.pepstock.charba.client.jsinterop.commons.ArrayObject;
import org.pepstock.charba.client.jsinterop.commons.AssignHelper;
import org.pepstock.charba.client.jsinterop.commons.CallbackProxy;
import org.pepstock.charba.client.jsinterop.commons.JsFactory;
import org.pepstock.charba.client.jsinterop.defaults.IsDefaultOptions;
import org.pepstock.charba.client.jsinterop.events.ChartNativeEvent;
import org.pepstock.charba.client.jsinterop.items.DatasetItem;
import org.pepstock.charba.client.jsinterop.items.SizeItem;
import org.pepstock.charba.client.jsinterop.items.UndefinedValues;

import jsinterop.annotations.JsFunction;

public class EventableOptions extends BaseOptions<EventableAnimation,EventableLegend>{
	
	/**
	 * Called if the event is of type 'mouseup' or 'click'. Called in the context of the chart and passed the event and an array
	 * of active elements.
	 * 
	 * @author Andrea "Stock" Stocchero
	 */
	@JsFunction
	public interface ChartClickCallback {
		/**
		 * Called if the event is of type 'mouseup' or 'click'. Called in the context of the chart and passed the event and an array
		 * of active elements.
		 * 
		 * @param event event generated by chart.
		 * @param metadata dataset meta data.
		 */
		void call(Object context, ChartNativeEvent event, ArrayObject<DatasetItem> items);
	}

	/**
	 * Called when any of the events fire. Called in the context of the chart and passed the event and an array of active
	 * elements (bars, points, etc).
	 * 
	 * @author Andrea "Stock" Stocchero
	 */
	@JsFunction
	public interface ChartHoverCallback {
		
		/**
		 * Called when any of the events fire. Called in the context of the chart and passed the event and an array of active
		 * elements (bars, points, etc).
		 * FIXME
		 * @param event event generated by chart.
		 * @param metadata dataset meta data.
		 */
		void call(Object context, ChartNativeEvent event, ArrayObject<DatasetItem> items);
	}

	/**
	 * Called when a resize occurs. Gets passed the new size.
	 * 
	 * @author Andrea "Stock" Stocchero
	 */
	@JsFunction
	public interface ChartResizeCallback {
		
		/**
		 * Called when a resize occurs. Gets passed the new size.
		 * 
		 * @param item the new size item.
		 */
		void call(Object context, Object chart, SizeItem size);
	}

	private final EventableAnimation animation;
	
	private final EventableLegend legend;
	
	private final CallbackProxy<ChartResizeCallback> resizeCallbackProxy = JsFactory.newCallbackProxy();

	private final CallbackProxy<ChartClickCallback> clickCallbackProxy = JsFactory.newCallbackProxy();

	private final CallbackProxy<ChartHoverCallback> hoverCallbackProxy = JsFactory.newCallbackProxy();
	
	/**
	 * Name of fields of JavaScript object.
	 */
	private enum Property implements Key
	{
		onResize,
		onClick,
		onHover
	}

	public EventableOptions(IsDefaultOptions defaultValues) {
		this(defaultValues, null);
	}

	protected EventableOptions(IsDefaultOptions defaultValues, NativeOptions delegated) {
		// if delegated == null, is global or chart, noit config
		super(defaultValues, delegated);
		animation = new EventableAnimation(this, getDefaultValues().getAnimation(), getDelegated().getAnimation());
		legend = new EventableLegend(this, getDefaultValues().getLegend(),getDelegated().getLegend());
	}
	
	public void setCharbaId(String id) {
		getDelegated().setCharbaId(id);
	}

	public String getCharbaId() {
		return AssignHelper.check(getDelegated().getCharbaId(), UndefinedValues.STRING);
	}

	/* (non-Javadoc)
	 * @see org.pepstock.charba.client.jsinterop.options.BaseOptions#getAnimation()
	 */
	@Override
	public EventableAnimation getAnimation() {
		return animation;
	}

	/* (non-Javadoc)
	 * @see org.pepstock.charba.client.jsinterop.options.BaseOptions#getLegend()
	 */
	@Override
	public EventableLegend getLegend() {
		return legend;
	}

	public void setOnResize(ChartResizeCallback callback) {
		if (callback != null) {
			resizeCallbackProxy.setCallback(callback);
			getDelegated().setOnResize(resizeCallbackProxy.getProxy());	
		} else {
			remove(Property.onResize);
		}
	}

	public void setOnClick(ChartClickCallback callback) {
		if (callback != null) {
			clickCallbackProxy.setCallback(callback);
			getDelegated().setOnClick(clickCallbackProxy.getProxy());
		} else {
			remove(Property.onClick);
		}
	}

	public void setOnHover(ChartHoverCallback callback) {
		if (callback != null) {
			hoverCallbackProxy.setCallback(callback);
			getDelegated().setOnHover(hoverCallbackProxy.getProxy());	
		} else {
			remove(Property.onHover);
		}
	}
}
