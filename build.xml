<?xml version="1.0" encoding="utf-8" ?>
<project name="Charba" default="build-bin" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant">

	<taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" />

	<!-- 
		CHARBA project configuration 
	-->
	
	<property file="ivyconfiguration.properties" prefix="ivy"/>
	
	<property name="charba.built.by" value="www.pepstock.org" />
	<tstamp>
		<format property="TODAY" pattern="yyyy-MM-dd HH:mm:ss" />
	</tstamp>
	
	<property name="src.dir" value="src" />
	<property name="classes.dir" value="classes" />
	<property name="javadoc.dir" value="javadoc" />

	<property name="dist.dir" value="dist" />

	<property name="bin.archive.file" value="${dist.dir}/charba-${ivy.revision}.jar" />
	<property name="sources.archive.file" value="${dist.dir}/charba-${ivy.revision}-sources.jar" />
	<property name="javadoc.archive.file" value="${dist.dir}/charba-${ivy.revision}-javadoc.jar" />

	<property name="artifact.pattern" value="${dist.dir}/[artifact]-[revision](-[classifier]).[ext]" />
	
	<!-- 
		JAVA compiler options 
	-->
	<property name="javac.debug" value="true" />
	<property name="javac.debuglevel" value="lines,vars,source" />
	<property name="javac.source" value="1.7" />
	<property name="javac.target" value="1.7" />
	<property name="javac.includeantruntime" value="false" />
	<property name="javac.nowarn" value="true" />

	<target name="clean" description="Cleans folders">
		<delete failonerror="false" includeemptydirs="true">
			<fileset dir="${classes.dir}" includes="**/*"/>
			<fileset dir="${dist.dir}" includes="**/*"/>
		</delete>
	</target>

	<!--
        IVY
    -->
	<target name="ivyRetrieve">
		<ivy:retrieve sync="true" pattern="lib-ivy/[artifact]-[revision](-[classifier]).[ext]" pathid="ivyPath" />
	</target>

	<!--
	  Mapping confs to scopes is important, otherwise
	  unmapped confs are included as optional. If you
	  have private confs, the best option seems to
	  be marking them as provided or system. See
	  IVY-1201 for an ehancement request.
	-->
	<target name="makePom">
		<property name="ivy.pom.name" value="Charba"/>
		<property name="ivy.pom.description" value="Charba, GWT wrapper for CHART.JS"/>
		<property name="ivy.pom.url" value="www.pepstock.org"/>
		<property name="ivy.pom.packaging" value="jar"/>
		
		<ivy:makepom ivyfile="ivy.xml" pomfile="${dist.dir}/charba-${ivy.revision}.pom" templatefile="pom.template" >
			<mapping conf="default" scope="compile" />
		</ivy:makepom>
	</target>

	<!--
	<target name="ivyPublish" depends="makePom, build-all">
		<ivy:publish resolver="local" pubrevision="${ivy.revision}">
			<artifacts pattern="${dist.dir}/[artifact]-[revision]-[type].[ext]" />
		</ivy:publish>
	</target>
	-->

	<target name="ivyPublish-local-m2">
		<ivy:resolve />
		<ivy:publish resolver="local-m2-publish" pubrevision="${ivy.revision}" forcedeliver="true" overwrite="true" publishivy="false">
			<artifacts pattern="${artifact.pattern}" />
		</ivy:publish>
	</target>

	<target name="ivyPublish-snapshot">
		<ivy:resolve />
		<ivy:publish resolver="nexus-snapshots" pubrevision="${ivy.revision}" forcedeliver="true" overwrite="true" publishivy="false">
			<artifacts pattern="${artifact.pattern}" />
		</ivy:publish>
	</target>

	<target name="ivyPublish-release">
		<ivy:resolve />
		<ivy:publish resolver="nexus-releases" pubrevision="${ivy.revision}" forcedeliver="true" overwrite="true" publishivy="false">
			<artifacts pattern="${artifact.pattern}" />
		</ivy:publish>
	</target>

	<target name="build-all" depends="build-bin, build-sources, build-javadoc" />
	
	<target name="build-sources">
		<jar jarfile="${sources.archive.file}">
			<fileset dir="${src.dir}" />
		</jar>
	</target>

	<target name="build-javadoc" depends="javadoc">
		<jar jarfile="${javadoc.archive.file}">
			<fileset dir="${javadoc.dir}" />
			<manifest>
				<section name="Charba">
					<attribute name="Version" value="${ivy.revision}" />
					<attribute name="Built-By" value="${charba.built.by}" />
					<attribute name="Creation-time" value="${TODAY}" />
				</section>
			</manifest>
		</jar>
	</target>

	<target name="build-bin" depends="compile">
		<jar jarfile="${bin.archive.file}">
			<fileset dir="${classes.dir}"/>
			<manifest>
				<section name="Charba">
					<attribute name="Version" value="${ivy.revision}" />
					<attribute name="Built-By" value="${charba.built.by}" />
					<attribute name="Creation-time" value="${TODAY}" />
				</section>
			</manifest>
		</jar>
	</target>

	<target name="compile" depends="clean, ivyRetrieve">
		<javac srcdir="${src.dir}" includes="**" encoding="utf-8" destdir="${classes.dir}" includeantruntime="${javac.includeantruntime}" source="${javac.source}" target="${javac.target}" nowarn="${javac.nowarn}" debug="${javac.debug}" debuglevel="${javac.debuglevel}">
			<classpath refid="ivyPath"/>
		</javac>
		<!-- copy is necessary as GWT needs sources -->
		<copy todir="${classes.dir}">
			<fileset dir="${src.dir}"/>
		</copy>
	</target>

	<target name="javadoc" depends="ivyRetrieve">
		<delete failonerror="false" includeemptydirs="true">
			<fileset dir="${javadoc.dir}" includes="**/*"/>
		</delete>
		<javadoc destdir="${javadoc.dir}" useexternalfile="yes" author="true" version="true" use="true" 
			windowtitle="Charba, GWT wrapper for CHART.JS">
			<classpath>
				<path refid="ivyPath" />
				<fileset dir="${classes.dir}" />
				<pathelement path="${java.class.path}" />
			</classpath>
			<packageset dir="${src.dir}" defaultexcludes="yes">
				<include name="org/pepstock/**" />
			</packageset>
		</javadoc>
	</target>
	
</project>