<?xml version="1.0" encoding="utf-8" ?>
<project name="Charba" default="build-bin" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant">

	<!-- 
	    Apache Ivy task definition and load properties
	 -->
	<taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" />
	<loadproperties srcfile="ivymoduleconfiguration.properties" />

	<!-- 
	    Google Closure task definition
	 -->
	<taskdef name="closure-compiler" classname="com.google.javascript.jscomp.ant.CompileTask">
		<classpath>
			<fileset dir="lib-ivy">
				<include name="**/*.jar" />
			</fileset>
			<pathelement path="${java.class.path}" />
		</classpath>
	</taskdef>

	<!-- 
		CHARBA configuration 
	-->
	<property name="charba.built.by" value="www.pepstock.org" />
	<tstamp>
		<format property="TODAY" pattern="yyyy-MM-dd HH:mm:ss" />
	</tstamp>

	<property name="src.dir" value="src" />
	<property name="classes.dir" value="classes" />
	<property name="javadoc.dir" value="javadoc" />
	<property name="resources.dir" value="resources" />
	<property name="retrieve.dir" value="retrieve" />

	<property name="javascript.charba.file" value="charba.helper.js" />
	<property name="javascript.charba.minify.file" value="charba.helper.min.js" />
	<property name="javascript.package" value="org/pepstock/charba/client/resources/js" />
	<property name="javascript.src.dir" value="${src.dir}/${javascript.package}" />
	<property name="javascript.dist.dir" value="${classes.dir}/${javascript.package}" />

	<!-- 
		LABELS CHART.JS plugin - waiting for approval of pull request
		https://github.com/emn178/chartjs-plugin-labels/pull/88 
	-->
	<property name="javascript.labels.file" value="chartjs-plugin-labels.js" />
	<property name="javascript.labels.minify.file" value="chartjs-plugin-labels.min.js" />

	<property name="javascript.chartjs.minify.file" value="chart.bundle.min.js" />
	<property name="javascript.datalabels.minify.file" value="chartjs-plugin-datalabels.min.js" />
	<property name="javascript.patternomaly.minify.file" value="patternomaly.min.js" />

	<property name="dist.dir" value="dist" />
	<property name="bin.archive.file" value="${dist.dir}/charba-${ivy.pubrevision}.jar" />
	<property name="sources.archive.file" value="${dist.dir}/charba-${ivy.pubrevision}-sources.jar" />
	<property name="javadoc.archive.file" value="${dist.dir}/charba-${ivy.pubrevision}-javadoc.jar" />
	<property name="artifact.pattern" value="${dist.dir}/[artifact]-[revision](-[classifier]).[ext]" />

	<!-- 
		JAVA compiler options 
	-->
	<property name="javac.debug" value="true" />
	<property name="javac.debuglevel" value="lines,vars,source" />
	<property name="javac.source" value="1.8" />
	<property name="javac.target" value="1.8" />
	<property name="javac.includeantruntime" value="false" />
	<property name="javac.nowarn" value="true" />

	<!-- 
		TARGET SECTIONS 
	-->
	<!-- 
		CHARBA - Removes the contents from all temporary folders 
	-->
	<target name="clean" description="Cleans folders">
		<delete failonerror="false" includeemptydirs="true">
			<fileset dir="${classes.dir}" includes="**/*"/>
			<fileset dir="${dist.dir}" includes="**/*"/>
			<fileset dir="${javadoc.dir}" includes="**/*"/>
		</delete>
	</target>

	<!--
        IVY - Retrieves by IVY the needed jar 
    -->
	<target name="ivyRetrieve">
		<ivy:retrieve sync="true" pattern="lib-ivy/[artifact]-[revision](-[classifier]).[ext]" pathid="ivyPath" />
	</target>

	<!--
        IVY - Makes POM file 
    -->
	<target name="makePom">
		<property name="ivy.pom.name" value="Charba"/>
		<property name="ivy.pom.description" value="Charba, GWT Chart library based on CHART.JS"/>
		<property name="ivy.pom.url" value="www.pepstock.org"/>
		<property name="ivy.pom.packaging" value="jar"/>

		<ivy:makepom ivyfile="ivy.xml" pomfile="${dist.dir}/charba-${ivy.pubrevision}.pom" templatefile="pom.template" >
			<mapping conf="default" scope="compile" />
		</ivy:makepom>
	</target>

	<!--
        IVY - Publishes snapshots into MVN 
    -->
	<target name="ivyPublish-snapshot">
		<ivy:resolve />
		<ivy:publish resolver="nexus-snapshots" pubrevision="${ivy.pubrevision}-SNAPSHOT" forcedeliver="true" overwrite="true" publishivy="false">
			<artifacts pattern="${artifact.pattern}" />
		</ivy:publish>
	</target>

	<!--
        IVY - Publishes official release into MVN 
    -->
	<target name="ivyPublish-release">
		<ivy:resolve />
		<ivy:publish resolver="nexus-releases" pubrevision="${ivy.pubrevision}" forcedeliver="true" overwrite="true" publishivy="false">
			<artifacts pattern="${artifact.pattern}" />
		</ivy:publish>
	</target>

	<!--
        CHARBA - BUILD all jars artifacts: classes, sources and javadoc
    -->
	<target name="build-all" depends="build-bin, build-sources, build-javadoc" />

	<!--
        CHARBA - BUILD sources jar
    -->
	<target name="build-sources">
		<jar jarfile="${sources.archive.file}">
			<fileset dir="${src.dir}" />
			<manifest>
				<section name="Charba">
					<attribute name="Version" value="${ivy.pubrevision}" />
					<attribute name="Built-By" value="${charba.built.by}" />
					<attribute name="Creation-time" value="${TODAY}" />
				</section>
			</manifest>
		</jar>
	</target>

	<!--
        CHARBA - BUILD javadoc jar
    -->
	<target name="build-javadoc" depends="javadoc">
		<jar jarfile="${javadoc.archive.file}">
			<fileset dir="${javadoc.dir}" />
			<manifest>
				<section name="Charba">
					<attribute name="Version" value="${ivy.pubrevision}" />
					<attribute name="Built-By" value="${charba.built.by}" />
					<attribute name="Creation-time" value="${TODAY}" />
				</section>
			</manifest>
		</jar>
	</target>

	<!--
        CHARBA - BUILD classes jar
    -->
	<target name="build-bin" depends="compile">
		<jar jarfile="${bin.archive.file}">
			<fileset dir="${classes.dir}"/>
			<manifest>
				<section name="Charba">
					<attribute name="Version" value="${ivy.pubrevision}" />
					<attribute name="Built-By" value="${charba.built.by}" />
					<attribute name="Creation-time" value="${TODAY}" />
				</section>
			</manifest>
		</jar>
	</target>

	<!--
        CHARBA - JAVA compile, MINIFY CHARBA javascript helper, COPY resources into classes folder
    -->
	<target name="compile" depends="clean, ivyRetrieve">
		<mkdir dir="${classes.dir}"/>
		<javac srcdir="${src.dir}" includes="**" encoding="utf-8" destdir="${classes.dir}" includeantruntime="${javac.includeantruntime}" source="${javac.source}" target="${javac.target}" nowarn="${javac.nowarn}" debug="${javac.debug}" debuglevel="${javac.debuglevel}" createMissingPackageInfoClass="false">
			<classpath refid="ivyPath"/>
		</javac>
		<!-- minify -->
		<echo>Minify CHARBA helper from file "${javascript.charba.file}" to "${javascript.charba.minify.file}" </echo>
		<closure-compiler compilationLevel="simple" debug="true" output="${javascript.dist.dir}/${javascript.charba.minify.file}" forceRecompile="true">
			<sources dir="${javascript.src.dir}">
				<file name="${javascript.charba.file}" />
			</sources>
		</closure-compiler>
		<echo>Minify LABELS plugin from file "${javascript.labels.file}" to "${javascript.labels.minify.file}" </echo>
		<closure-compiler compilationLevel="simple" debug="true" output="${javascript.dist.dir}/${javascript.labels.minify.file}" forceRecompile="true">
			<sources dir="${javascript.src.dir}">
				<file name="${javascript.labels.file}" />
			</sources>
		</closure-compiler>
		<!-- copy is necessary as GWT needs sources: exclude charba.helper.js-->
		<copy todir="${classes.dir}">
			<fileset dir="${src.dir}">
				<exclude name="**/${javascript.charba.file}"/>
				<exclude name="**/${javascript.labels.file}"/>
			</fileset>
		</copy>
		<!-- javascript resoures to classes -->
		<copy todir="${javascript.dist.dir}">
			<fileset dir="${resources.dir}">
				<include name="**/*.js"/>
			</fileset>
		</copy>
	</target>

	<!--
        CHARBA - JAVADOC execution
    -->
	<target name="javadoc" depends="ivyRetrieve">
		<delete failonerror="false" includeemptydirs="true">
			<fileset dir="${javadoc.dir}" includes="**/*"/>
		</delete>
		<javadoc destdir="${javadoc.dir}" useexternalfile="yes" author="true" version="true" use="true" 
			windowtitle="Charba, GWT wrapper for CHART.JS">
			<classpath>
				<path refid="ivyPath" />
				<fileset dir="${classes.dir}" />
				<pathelement path="${java.class.path}" />
			</classpath>
			<packageset dir="${src.dir}" defaultexcludes="yes">
				<include name="org/pepstock/**" />
			</packageset>
			<link offline="false" href="https://docs.oracle.com/javase/8/docs/api/" />
			<link offline="false" href="http://www.gwtproject.org/javadoc/latest/" />
		</javadoc>
	</target>

	<!--
        CHARBA - gets the javascript minify of CHART.JS and datalabels plugin
        PAY ATTENTION: these targets are insterted only for documentation and to get javascripts but before to apply must be checked
    -->
	<target name="retrieveOfficialChartJS">
		<echo>Retrieve CHART.JS minify javascript resource - version ${depver.chartjs}</echo>
		<mkdir dir="${retrieve.dir}" />
		<delete failonerror="false" includeemptydirs="true">
			<fileset dir="${retrieve.dir}" includes="${javascript.chartjs.minify.file}" />
		</delete>
		<get src="https://cdn.jsdelivr.net/npm/chart.js@${depver.chartjs}/dist/Chart.bundle.min.js" dest="${retrieve.dir}/${javascript.chartjs.minify.file}" />
	</target>

	<target name="retrieveLatestChartJS">
		<echo>Retrieve CHART.JS minify javascript resource - latest build [MUST not be used for production purposes]</echo>
		<mkdir dir="${retrieve.dir}" />
		<delete failonerror="false" includeemptydirs="true">
			<fileset dir="${retrieve.dir}" includes="${javascript.chartjs.minify.file}" />
		</delete>
		<get src="https://www.chartjs.org/dist/master/Chart.bundle.min.js" dest="${retrieve.dir}/${javascript.chartjs.minify.file}" />
	</target>

	<target name="retrieveOfficialDatalabels">
		<echo>Retrieve DATALABELS plugin minify javascript resource - version ${depver.datalabels}</echo>
		<mkdir dir="${retrieve.dir}" />
		<delete failonerror="false" includeemptydirs="true">
			<fileset dir="${retrieve.dir}" includes="${javascript.datalabels.minify.file}" />
		</delete>
		<get src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels@${depver.datalabels}" dest="${retrieve.dir}/${javascript.datalabels.minify.file}" />
	</target>

	<target name="retrieveLatestDatalabels">
		<echo>Retrieve DATALABELS plugin minify javascript resource - latest build [MUST not be used for production purposes]</echo>
		<mkdir dir="${retrieve.dir}" />
		<delete failonerror="false" includeemptydirs="true">
			<fileset dir="${retrieve.dir}" includes="${javascript.datalabels.minify.file}" />
		</delete>
		<get src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels" dest="${retrieve.dir}/${javascript.datalabels.minify.file}" />
	</target>

	<target name="retrieveOfficialPatternomaly">
		<echo>Retrieve Patternomaly library minify javascript resource - version ${depver.patternomaly}</echo>
		<mkdir dir="${retrieve.dir}" />
		<delete failonerror="false" includeemptydirs="true">
			<fileset dir="${retrieve.dir}" includes="${javascript.datalabels.minify.file}" />
		</delete>
		<get src="https://cdn.jsdelivr.net/npm/patternomaly@${depver.patternomaly}/dist/patternomaly.min.js" dest="${retrieve.dir}/${javascript.patternomaly.minify.file}" />
	</target>

	<!--
		IVY targets for Travis CI
	-->
	<property name="ivy.install.version" value="2.4.0" />
	<condition property="ivy.home" value="${env.IVY_HOME}">
		<isset property="env.IVY_HOME" />
	</condition>
	<property name="ivy.home" value="${user.home}/.ant" />
	<property name="ivy.jar.dir" value="${ivy.home}/lib" />
	<property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar" />

	<target name="ivyDownload" unless="offline">
		<mkdir dir="${ivy.jar.dir}"/>
		<!-- download Ivy from web site so that it can be used even without any special installation -->
		<get src="https://repo1.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar"
	             dest="${ivy.jar.file}" usetimestamp="true"/>
	</target>

	<target name="ivyInit" depends="ivyDownload">
		<!-- try to load Ivy here from Ivy home, in case the user has not already dropped
	         it into Ant's lib dir (note that the latter copy will always take precedence).
	         We will not fail as long as local lib dir exists (it may be empty) and
	         Ivy is in at least one of Ant's lib dir or the local lib dir. -->
		<path id="ivy.lib.path">
			<fileset dir="${ivy.jar.dir}" includes="*.jar"/>
		</path>
	</target>

</project>